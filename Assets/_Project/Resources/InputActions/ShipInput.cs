//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Source/InputActions/ShipInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ShipInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ShipInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ShipInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f9b90115-5489-4012-81ac-67a33988d5ba"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""e49e6e33-1992-4c98-a975-92d72944c741"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UsePrimaryWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""bb6a8dc5-1147-40d3-b01c-ddd5137aeaa2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSecondaryWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""a5714d88-af6d-4772-a8f0-d219a0949247"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""023db027-1b6a-42a4-bf33-37eefa1d8269"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""112b2172-1ee4-4cce-834c-c351ae8dfb90"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ec4e4192-5bf2-4ad9-bcc4-1c96c178400f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PcInput"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4d7de046-9701-4bb6-8b62-eb7e5caa2d4a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PcInput"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f2f49fdc-dfdb-4057-be86-205597b48df3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PcInput"",
                    ""action"": ""UsePrimaryWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc4643fb-ea26-46c2-9231-692e239e2c47"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PcInput"",
                    ""action"": ""UseSecondaryWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fae3535b-a824-4075-81d9-1345517111c4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PcInput"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PcInput"",
            ""bindingGroup"": ""PcInput"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Rotation = m_Player.FindAction("Rotation", throwIfNotFound: true);
        m_Player_UsePrimaryWeapon = m_Player.FindAction("UsePrimaryWeapon", throwIfNotFound: true);
        m_Player_UseSecondaryWeapon = m_Player.FindAction("UseSecondaryWeapon", throwIfNotFound: true);
        m_Player_Accelerate = m_Player.FindAction("Accelerate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Rotation;
    private readonly InputAction m_Player_UsePrimaryWeapon;
    private readonly InputAction m_Player_UseSecondaryWeapon;
    private readonly InputAction m_Player_Accelerate;
    public struct PlayerActions
    {
        private @ShipInput m_Wrapper;
        public PlayerActions(@ShipInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_Player_Rotation;
        public InputAction @UsePrimaryWeapon => m_Wrapper.m_Player_UsePrimaryWeapon;
        public InputAction @UseSecondaryWeapon => m_Wrapper.m_Player_UseSecondaryWeapon;
        public InputAction @Accelerate => m_Wrapper.m_Player_Accelerate;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @UsePrimaryWeapon.started += instance.OnUsePrimaryWeapon;
            @UsePrimaryWeapon.performed += instance.OnUsePrimaryWeapon;
            @UsePrimaryWeapon.canceled += instance.OnUsePrimaryWeapon;
            @UseSecondaryWeapon.started += instance.OnUseSecondaryWeapon;
            @UseSecondaryWeapon.performed += instance.OnUseSecondaryWeapon;
            @UseSecondaryWeapon.canceled += instance.OnUseSecondaryWeapon;
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @UsePrimaryWeapon.started -= instance.OnUsePrimaryWeapon;
            @UsePrimaryWeapon.performed -= instance.OnUsePrimaryWeapon;
            @UsePrimaryWeapon.canceled -= instance.OnUsePrimaryWeapon;
            @UseSecondaryWeapon.started -= instance.OnUseSecondaryWeapon;
            @UseSecondaryWeapon.performed -= instance.OnUseSecondaryWeapon;
            @UseSecondaryWeapon.canceled -= instance.OnUseSecondaryWeapon;
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_PcInputSchemeIndex = -1;
    public InputControlScheme PcInputScheme
    {
        get
        {
            if (m_PcInputSchemeIndex == -1) m_PcInputSchemeIndex = asset.FindControlSchemeIndex("PcInput");
            return asset.controlSchemes[m_PcInputSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnUsePrimaryWeapon(InputAction.CallbackContext context);
        void OnUseSecondaryWeapon(InputAction.CallbackContext context);
        void OnAccelerate(InputAction.CallbackContext context);
    }
}
